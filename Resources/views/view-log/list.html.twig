{% extends '@HttpLog/base.html.twig' %}
{% block stylesheets %}
    <style>
    .http-body {
        white-space: pre;
        max-height: 8em;
        max-width: 33vw;
        overflow: auto;
    }
    </style>
{% endblock %}
{% block body %}
    <h1>Http Log</h1>
    <div>
        <input name="ip_filter" title="Фильтрация по IP"/>
    </div>
    <table class="http-log-table">
        <thead>
        <tr>
            <th>Url запроса</th>
            <th>Запрос</th>
            <th>Ответ</th>
            <th>Статус</th>
            <th>IP клиента</th>
            <th>Дата/время</th>
        </tr>
        </thead>
        <tbody>
        {% for entry in entries %}
            <tr>
                <td>{{ entry.uri }}</td>
                <td>
                    <div class="http-body">{{ entry.request }}</div>
                </td>
                <td>
                    <div class="http-body">{{ entry.response }}</div>
                </td>
                <td>{{ entry.status }}</td>
                <td>{{ entry.ip }}</td>
                <td>{{ entry.queryTime | date('Y-m-d H:i:s') }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
{% endblock %}
{% block javascripts %}
    <script>
    const httpLogTable  = document.querySelector('table.http-log-table');
    const ipFilterInput = document.querySelector(`input[name=ip_filter]`);

    ipFilterInput.addEventListener('change', async () => {
      const ip     = ipFilterInput.value.replace(/\s+$|^\s+/g, '');
      const result = await getData(ip);

      updateUI(result.entries);
    });

    async function getData(ip) {
      const response = await fetch('/admin/http-log/?' + new URLSearchParams({ip}), {
        headers: {
          Accept: 'application/json',
        }
      });
      return response.json();
    }

    function updateUI(entries) {
      const tbody = httpLogTable.querySelector('tbody');
      // remove old rows
      for (const tr of tbody.querySelectorAll('tr')) {
        tr.parentNode.removeChild(tr);
      }
      // build new rows
      for (const entry of entries) {
        const tr = document.createElement('tr');
        {
          const td     = document.createElement('td');
          td.innerText = entry.uri;
          tr.appendChild(td);
        }
        {
          const td  = document.createElement('td');
          const pre = document.createElement('div');
          pre.classList.add('http-body')
          pre.innerText = entry.request;
          td.appendChild(pre);
          tr.appendChild(td);
        }
        {
          const td  = document.createElement('td');
          const pre = document.createElement('div');
          pre.classList.add('http-body')
          pre.innerText = entry.response;
          td.appendChild(pre);
          tr.appendChild(td);
        }
        {
          const td     = document.createElement('td');
          td.innerText = entry.status;
          tr.appendChild(td);
        }
        {
          const td     = document.createElement('td');
          td.innerText = entry.ip;
          tr.appendChild(td);
        }
        {
          const td     = document.createElement('td');
          td.innerText = entry.queryTime;
          tr.appendChild(td);
        }
        tbody.appendChild(tr);
      }
    }
    </script>
{% endblock %}
